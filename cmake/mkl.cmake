if(NOT DEFINED ENV{MKL_LIB})
	if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
		set(MKL_PATH /opt/intel/mkl)
		if(NOT EXISTS ${MKL_PATH})
			set(MKL_PATH /opt/intel/oneapi/mkl/latest)
			if(NOT EXISTS ${MKL_PATH})
				message(FATAL_ERROR "Wrong MKL path: " ${MKL_PATH}
					". Seems like MKL doesn't installed.")
			endif()
		endif()
		set(MKL_LIB "${MKL_PATH}/lib/intel64")
	elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
		set(MKL_PATH /opt/intel/mkl)
		if(NOT EXISTS ${MKL_PATH})
			set(MKL_PATH /opt/intel/oneapi/mkl/latest)
			if(NOT EXISTS ${MKL_PATH})
				message(FATAL_ERROR "Wrong MKL path: " ${MKL_PATH}
					". Seems like MKL doesn't installed.")
			endif()
		endif()
		set(MKL_LIB "${MKL_PATH}/lib")
	elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
		set(MKL_PATH "C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl")
		if(EXISTS ${MKL_PATH})
			if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
				set(MKL_LIB "${MKL_PATH}/lib/ia32")
			else ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
				set(MKL_LIB "${MKL_PATH}/lib/intel64")
			endif ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
		else()
			set(MKL_PATH "C:/Program Files (x86)/Intel/oneAPI/mkl/latest")
			if(EXISTS ${MKL_PATH})
				if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
					set(MKL_LIB "${MKL_PATH}/lib/ia32")
				else ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
					set(MKL_LIB "${MKL_PATH}/lib/intel64")
				endif ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")	
			else()
				message(FATAL_ERROR "Wrong MKL path: " ${MKL_PATH})
			endif()
		endif()
	else()
		message(FATAL_ERROR "Unsupported platform: " ${CMAKE_SYSTEM_NAME})
	endif()
endif()

set(LPREFIX ${CMAKE_STATIC_LIBRARY_PREFIX})
set(LSUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})

if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
		find_library(mkl_intel_c NAME ${LPREFIX}mkl_intel_c${LSUFFIX} PATHS ${MKL_LIB})
		if(NOT mkl_intel_c)
			message(FATAL_ERROR ${LPREFIX}mkl_intel_c${LSUFFIX} " is missing")
		endif()
	else ()
		find_library(mkl_ilp64 NAME ${LPREFIX}mkl_intel_ilp64${LSUFFIX} PATHS ${MKL_LIB})
		if(NOT mkl_ilp64)
			message(FATAL_ERROR ${LPREFIX}mkl_intel_ilp64${LSUFFIX} " is missing")
		endif()
	endif ()
else ()
	find_library(mkl_ilp64 NAME ${LPREFIX}mkl_intel_ilp64${LSUFFIX} PATHS ${MKL_LIB})
	if(NOT mkl_ilp64)
		message(FATAL_ERROR ${LPREFIX}mkl_intel_ilp64${LSUFFIX} " is missing")
	endif()
endif()


find_library(mkl_seq NAME ${LPREFIX}mkl_sequential${LSUFFIX} PATHS ${MKL_LIB})
if (NOT mkl_seq)
	message(FATAL_ERROR ${LPREFIX}mkl_sequential${LSUFFIX} " is missing")
endif()
find_library(mkl_core NAME ${LPREFIX}mkl_core${LSUFFIX} PATHS ${MKL_LIB})
if (NOT mkl_seq)
	message(FATAL_ERROR ${LPREFIX}mkl_core${LSUFFIX} " is missing")
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	set(MKL_LINK_OPTIONS -Wl,--start-group ${mkl_ilp64} ${mkl_seq} ${mkl_core} -Wl,--end-group -lpthread -lm -ldl)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	set(MKL_LINK_OPTIONS ${mkl_ilp64} ${mkl_seq} ${mkl_core} -lpthread -lm -ldl)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
		set(MKL_LINK_OPTIONS ${mkl_intel_c} ${mkl_seq} ${mkl_core})
	else ()
		set(MKL_LINK_OPTIONS ${mkl_ilp64} ${mkl_seq} ${mkl_core})
	endif ()
endif()

add_link_options(${MKL_LINK_OPTIONS})
