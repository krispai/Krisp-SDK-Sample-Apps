set(MKL_LIB_DIR ${KRISP_SDK_PATH}/ext_deps/mkl/lib)

set(LPREFIX ${CMAKE_STATIC_LIBRARY_PREFIX})	
set(LSUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})	

find_library(mkl_seq NAME ${LPREFIX}mkl_sequential${LSUFFIX} PATHS ${MKL_LIB_DIR})	
if (NOT mkl_seq)	
	message(FATAL_ERROR ${LPREFIX}mkl_sequential${LSUFFIX} " is missing")	
endif()	
find_library(mkl_core NAME ${LPREFIX}mkl_core${LSUFFIX} PATHS ${MKL_LIB_DIR})	
if (NOT mkl_core)	
	message(FATAL_ERROR ${LPREFIX}mkl_core${LSUFFIX} " is missing")	
endif()	

if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")	
	find_library(mkl_intel_c NAME ${LPREFIX}mkl_intel_c${LSUFFIX} PATHS ${MKL_LIB_DIR})	
	if(NOT mkl_intel_c)	
		message(FATAL_ERROR ${LPREFIX}mkl_intel_c${LSUFFIX} " is missing")	
	endif()	
	set(MKL_LIB_LIST ${mkl_intel_c} ${mkl_seq} ${mkl_core})	
else ()	
	find_library(mkl_lp64 NAME ${LPREFIX}mkl_intel_lp64${LSUFFIX} PATHS ${MKL_LIB_DIR})	
	if(NOT mkl_lp64)	
		message(FATAL_ERROR ${LPREFIX}mkl_intel_lp64${LSUFFIX} " is missing")	
	endif()	
	set(MKL_LIB_LIST ${mkl_lp64} ${mkl_seq} ${mkl_core})	
endif ()	
